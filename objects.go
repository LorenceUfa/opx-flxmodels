package models

import (
	"database/sql"
	"encoding/json"
	"fmt"
)

type ConfigObj interface {
	UnmarshalObject(data []byte) (ConfigObj, error)
	CreateDBTable(dbHdl *sql.DB) error
	StoreObjectInDb(dbHdl *sql.DB) (int64, error)
	DeleteObjectFromDb(objId int64, dbHdl *sql.DB) error
}

//
// This file is handcoded for now. Eventually this would be generated by yang compiler
//
type IPV4Route struct {
	DestinationNw     string
	NetworkMask       string
	Cost              int
	NextHopIp         string
	OutgoingInterface string
	Protocol          string
}

func (obj IPV4Route) UnmarshalObject(body []byte) (ConfigObj, error) {
	var v4Route IPV4Route
	var err error
	if err = json.Unmarshal(body, &v4Route); err != nil {
		fmt.Println("### Trouble in unmarshaling IPV4Route from Json", body)
	}
	return v4Route, err
}

type BGPGlobalConfig struct {
	AS       uint32
	RouterId string
}

func (obj BGPGlobalConfig) UnmarshalObject(body []byte) (ConfigObj, error) {
	var gConf BGPGlobalConfig
	var err error
	if err = json.Unmarshal(body, &gConf); err != nil {
		fmt.Println("### Trouble in unmarshalling BPGlobalConfig from Json", body)
	}
	return gConf, err
}

type BGPGlobalState struct {
	AS            uint32
	RouterId      string
	TotalPaths    uint32
	TotalPrefixes uint32
}

type PeerType int

const (
	PeerTypeInternal PeerType = iota
	PeerTypeExternal
)

type BgpCounters struct {
	Update       uint64
	Notification uint64
}

type BGPMessages struct {
	Sent     BgpCounters
	Received BgpCounters
}

type BGPQueues struct {
	Input  uint32
	Output uint32
}

type BGPNeighborConfig struct {
	PeerAS          uint32
	LocalAS         uint32
	AuthPassword    string
	Description     string
	NeighborAddress string
}

func (obj BGPNeighborConfig) UnmarshalObject(body []byte) (ConfigObj, error) {
	var nConf BGPNeighborConfig
	var err error
	if err = json.Unmarshal(body, &nConf); err != nil {
		fmt.Println("### Trouble in unmarshaling BGPNeighborConfig from Json", body)
	}
	return nConf, err
}

type BGPNeighborState struct {
	PeerAS          uint32
	LocalAS         uint32
	PeerType        PeerType
	AuthPassword    string
	Description     string
	NeighborAddress string
	SessionState    uint32
	Messages        BGPMessages
	Queues          BGPQueues
}

/* Start - Asicd objects */
type Vlan struct {
	VlanId      int32
	Ports       string
	PortTagType string
}

/* FIXME : RouterIf needs to be replaced by generic
 * layer 2 object name e.x Port-21 or Vlan-5 etc.
 * Internally this l2 object name can be translated
 * into appropriate key.
 */
type IPv4Intf struct {
	IpAddr   string
	RouterIf int32
}

type IPv4Neighbor struct {
	IpAddr   string
	MacAddr  string
	VlanId   int32
	RouterIf int32
}

func (obj Vlan) UnmarshalObject(body []byte) (ConfigObj, error) {
	var vlanObj Vlan
	var err error
	if err = json.Unmarshal(body, &vlanObj); err != nil {
		fmt.Println("### Trouble in unmarshaling Vlan from Json", body)
	}
	return vlanObj, err
}

func (obj IPv4Intf) UnmarshalObject(body []byte) (ConfigObj, error) {
	var v4Intf IPv4Intf
	var err error
	if err = json.Unmarshal(body, &v4Intf); err != nil {
		fmt.Println("### Trouble in unmarshaling IPv4Intf from Json", body)
	}
	return v4Intf, err
}

func (obj IPv4Neighbor) UnmarshalObject(body []byte) (ConfigObj, error) {
	var v4Nbr IPv4Neighbor
	var err error
	if err = json.Unmarshal(body, &v4Nbr); err != nil {
		fmt.Println("### Trouble in unmarshaling IPv4Neighbor from Json", body)
	}
	return v4Nbr, err
}
