// BGPRoutingPolicy.go
package models

import (
	"encoding/json"
	"fmt"
)

/*type BGPPolicyPrefix struct {
	IpPrefix string
	MaskLengthRange string
}
*/
type BGPPolicyPrefixSet struct {
	BaseObj
	PrefixSetName string `SNAPROUTE: "KEY"`
	IpPrefixList  [  ]PolicyPrefix
}

func (obj BGPPolicyPrefixSet) UnmarshalObject(body []byte) (ConfigObj, error) {
	var policyPrefixSet BGPPolicyPrefixSet
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &policyPrefixSet); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyPrefixSet from Json", body)
		}
	}
	return policyPrefixSet, err
}

/*
type BGPPolicyDstIpMatchPrefixSetCondition struct {
	//yang_name: prefix-set class: leaf
	PrefixSet string
	//yang_name: match-set-options class: leaf
    Prefix PolicyPrefix
}
*/
type BGPPolicyConditionConfig struct {
	BaseObj
	Name          string `SNAPROUTE: "KEY"`
	ConditionType string
	IpPrefix      string
	/*
	   Defines a range for the masklength, or 'exact' if
	   the prefix has an exact length.

	   Example: 10.3.192.0/21 through 10.3.192.0/24 would be
	   expressed as prefix: 10.3.192.0/21,
	   masklength-range: 21..24.

	   Example: 10.3.192.0/21 would be expressed as
	   prefix: 10.3.192.0/21,
	   masklength-range: exact
	*/
	MaskLengthRange string
}

func (obj BGPPolicyConditionConfig) UnmarshalObject(body []byte) (ConfigObj, error) {
	var bgpPolicyConditionConfig BGPPolicyConditionConfig
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &bgpPolicyConditionConfig); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyConditionConfig from Json", body)
		}
	}
	return bgpPolicyConditionConfig, err
}

type BGPPolicyConditionState struct {
	BaseObj
	//yang_name: name class: leaf
	Name           string `SNAPROUTE: "KEY"`
	ConditionInfo  string
	PolicyStmtList []string
}

func (obj BGPPolicyConditionState) UnmarshalObject(body []byte) (ConfigObj, error) {
	var policyConditionState BGPPolicyConditionState
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &policyConditionState); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyConditionState from Json", body)
		}
	}
	return policyConditionState, err
}

type BGPPolicyAggregateAction struct {
	GenerateASSet   bool
	SendSummaryOnly bool
}

type BGPPolicyActionConfig struct {
	BaseObj
	Name            string `SNAPROUTE: "KEY"`
	ActionType      string
	GenerateASSet   bool
	SendSummaryOnly bool
}

func (obj BGPPolicyActionConfig) UnmarshalObject(body []byte) (ConfigObj, error) {
	var policyActionConfig BGPPolicyActionConfig
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &policyActionConfig); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyActionConfig from Json", body)
		}
	}
	return policyActionConfig, err
}

type BGPPolicyActionState struct {
	BaseObj
	//yang_name: name class: leaf
	Name           string `SNAPROUTE: "KEY"`
	ActionInfo     string
	PolicyStmtList []string
}

func (obj BGPPolicyActionState) UnmarshalObject(body []byte) (ConfigObj, error) {
	var policyActionState BGPPolicyActionState
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &policyActionState); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyActionState from Json", body)
		}
	}
	return policyActionState, err
}

type BGPPolicyStmtConfig struct {
	BaseObj
	//yang_name: name class: leaf
	Name string `SNAPROUTE: "KEY"`
	//	AdminState string
	MatchConditions string
	Conditions      []string
	Actions         []string
}

func (obj BGPPolicyStmtConfig) UnmarshalObject(body []byte) (ConfigObj, error) {
	var policyStmt BGPPolicyStmtConfig
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &policyStmt); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyStmtConfig from Json", body)
		}
	}
	return policyStmt, err
}

type BGPPolicyStmtState struct {
	BaseObj
	//yang_name: name class: leaf
	Name string `SNAPROUTE: "KEY"`
	//	AdminState string
	//	OperState  string
	MatchConditions string
	Conditions      []string
	Actions         []string
}

func (obj BGPPolicyStmtState) UnmarshalObject(body []byte) (ConfigObj, error) {
	var policyStmt BGPPolicyStmtState
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &policyStmt); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyStmtState from Json", body)
		}
	}
	return policyStmt, err
}

type BGPPolicyDefinitionConfig struct {
	/*
		    This class was auto-generated by the GOSTRUCT plugin for PYANG
		    from YANG module openconfig-routing-policy_mod
		    based on the path /policy-definition.
		    Each member element of the container is represented as a struct
		    variable - with a specific YANG type.

			YANG Description: List of top-level policy definitions, keyed by unique
		name.  These policy definitions are expected to be
		referenced (by name) in policy chains specified in import
		or export configuration statements.
	*/
	BaseObj
	//yang_name: name class: leaf
	Name          string `SNAPROUTE: KEY`
	Precedence    int
	MatchType     string
	Export        bool
	Import        bool
	Global        bool
	StatementList [ ]PolicyDefinitionStmtPrecedence
	//yang_name: statement class: list
	//StatementList []interface{} //PolicyDefinitionStmtPrecedence
}

func (obj BGPPolicyDefinitionConfig) UnmarshalObject(body []byte) (ConfigObj, error) {
	var policyDefinition BGPPolicyDefinitionConfig
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &policyDefinition); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyDefinitionConfig from Json", body)
		}
	}
	return policyDefinition, err
}

type BGPPolicyDefinitionState struct {
	/*
		    This class was auto-generated by the GOSTRUCT plugin for PYANG
		    from YANG module openconfig-routing-policy_mod
		    based on the path /policy-definition/statement.
		    Each member element of the container is represented as a struct
		    variable - with a specific YANG type.

			YANG Description: Policy statements group conditions and actions
		within a policy definition.  They are evaluated in
		the order specified (see the description of policy
		evaluation at the top of this module.
	*/
	BaseObj
	//yang_name: name class: leaf
	Name         string `SNAPROUTE: "KEY"`
	HitCounter   int
	IpPrefixList []string
}

func (obj BGPPolicyDefinitionState) UnmarshalObject(body []byte) (ConfigObj, error) {
	var policyDefinitionStmt BGPPolicyDefinitionState
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &policyDefinitionStmt); err != nil {
			fmt.Println("### Trouble in unmarshaling BGPPolicyDefinitionState from Json", body)
		}
	}
	return policyDefinitionStmt, err
}
